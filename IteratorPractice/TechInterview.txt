디자인 패턴

디자인 패턴 중 하나인 반복자 (Iterator)는 컬렉션(Collection) 객체의 내부구조를 노출하지 않고, 요소(element)를 순회(traverse)하는 데에 사용됩니다.
이 패턴은 반복작업을 수행하며, 복잡한 로직을 캡슐화하여 간단하고 일관된 인터페이스를 제공합니다.

반복자 패턴은 크게 두 가지 요소로 구성됩니다.
첫 번째는 컬렉션 객체 이며, 이 객체는 요소의 집합을 저장하고 있습니다.
두 번째는 반복자 입니다. 이 객체는 컬렉션 객체의 내부구조를 모르고도 요소를 순회할 수 있는 메서드를 제공합니다.

반복자 패턴의 핵심은 컬렉션 객체와 반복자 객체 간의 결합도를 낮추는 것 입니다.
컬렉션 객체의 내부 구조가 변경되더라도, 반복자 객체는 컬렉션 객체의 인터페이스만을 사용하기 때문에 변경사항에 덜 민감합니다. 이는 유연성과 확장성을 높이는데 도움을 줍니다.

프로젝트 파일에 있는 LinkedList 클래스와 List 클래스는 반복자 패턴을 구현한 예시 중 한 가지 입니다.
GetEnumerator()는 LinkedList 클래스의 요소를 순회하는데에 사용되며 Enumerator 구조체는 Linkedlist 클래스의 내부 구조를 모르더라도 순회할 수 있는 인터페이스를 제공합니다.
이는 컬렉션 객체와 반복자 객체간의 결합도를 낮추고, 유연성과 확장성을 높이는 데에 도움을 줍니다.

컬렉션의 경우 데이터 요소간의 집합을 나타내기에 컬렉션은 요소의 집합을 효율적으로 다루기 위한 자료구조
반복자의 경우 컬렉션 내부의 데이터 요소를 순회하면서 작업을 수행

컬렉션과 반복자가 함께 사용되어 데이터를 다루고, 컬렉션에서는 요소의 추가 삭제등을 처리하고 반복자는 순회하면서 요소를 처리한다.