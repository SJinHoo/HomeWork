using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinkedListpractice
{/*
    Linked List와 List는 모두 데이터를 저장하기 위한 데이터 구조로, 데이터를 추가, 삭제, 탐색하는데 사용됩니다. 
    그러나 두 구조체는 구현 방식에서 차이점이 있다
    List는 내부적으로 배열을 사용하여 구현되며, 배열의 특성상 데이터를 추가, 삭제할 때마다 메모리의 재배치가 필요합니다. 
    그러므로 데이터의 개수가 많아질수록 처리 시간이 오래 걸리며, 메모리 사용량도 많아집니다. 
    그러나 배열의 특성 상 랜덤 액세스(임의 접근이)가 가능하며, 인덱스를 이용한 탐색이 매우 빠릅니다.
    반면, LinkedList는 노드(Node)라는 개별적인 객체를 이용해 구현되며, 각 노드는 데이터와 다음 노드를 참조하는 포인터(혹은 참조값)를 가지고 있습니다. 
    이 포인터를 이용하여 다음 노드에 접근할 수 있습니다. Linked List는 데이터를 추가, 삭제할 때 포인터만 조작하면 되기 때문에 배열과 달리 랜덤 액세스에는 취약하지만, 데이터의 추가, 삭제가 빠르고 메모리도 적게 사용합니다.
    또한, List는 메모리 상에서 연속된 공간을 할당하여 사용하므로, 크기가 가변적인 데이터의 저장에는 어려움이 있습니다. Linked List는 노드를 동적으로 할당하고 해제하므로, 크기가 가변적인 데이터를 저장하는 데 적합합니다.
    따라서, 데이터의 개수가 많고 빠른 탐색이 필요한 경우에는 List가 유리하고, 데이터의 개수가 적거나 자주 추가, 삭제되는 경우에는 Linked List가 유리합니다.
  */
}
